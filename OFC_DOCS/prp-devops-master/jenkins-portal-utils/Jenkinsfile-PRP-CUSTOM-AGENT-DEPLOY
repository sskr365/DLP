import java.time.LocalDateTime
import groovy.json.JsonBuilder

pipeline {
    agent any

    stages {
        stage('Get User Input') {
            steps {
                echo '*** START GET-USER-INPUT ***'

                script {
                    properties([
                        parameters([
                            extendedChoice(name: 'JOB_NAME', description: '', multiSelectDelimiter: ',', quoteValue: false, saveJSONParameterToFile: false, type: 'PT_HIDDEN', visibleItemCount: 5, defaultBindings: '', defaultGroovyClasspath: '',
                                defaultGroovyScript: '''
                                    def build = Thread.currentThread().toString()
                                    def regexp= ".+?/job/([^/]+)/.*"
                                    def match = build  =~ regexp
                                    def jobName = match[0][1]
                                    return jobName
                                '''
                            ),
                            extendedChoice(name: 'JOB_PROPS', description: '', multiSelectDelimiter: ',', quoteValue: false, saveJSONParameterToFile: false, type: 'PT_HIDDEN', visibleItemCount: 5, defaultBindings: '', defaultGroovyClasspath: '',
                                defaultGroovyScript: '''
                                    def curlCmd = ["curl", "-H \'Accept:application/vnd.github.v3.raw\'", "-o", "jenkins-dxp-prp.properties", "-H", "Authorization:token c69d166d536a56ce05bea08aff3be9adfc21c8d5", "https://raw.github.hpe.com/prpdxp/prp-devops/master/jenkins-dxp/jenkins-dxp-prp.properties"]
                                    def proc = curlCmd.execute()
                                    proc.waitFor()
                                    Properties properties = new Properties()
                                    File propertiesFile = new File("jenkins-dxp-prp.properties")
                                    def stream = propertiesFile.newDataInputStream()
                                    properties.load(stream)
                                    def groovyPropMap = []
                                    properties.each() { k, v -> groovyPropMap << \'"\' + k + \'":"\' + v + \'"\'}
                                    return groovyPropMap.toString()
                                '''
                            ),
                            [$class: 'CascadeChoiceParameter', name: 'DEPLOY_ENVIRONMENT', choiceType: 'PT_SINGLE_SELECT', description: '', filterLength: 1, filterable: false, randomName: 'choice-parameter-5012569915603583', referencedParameters: 'JOB_NAME,JOB_PROPS', script: [$class: 'GroovyScript', fallbackScript: [classpath: [], sandbox: false, script: ''], script: [classpath: [], sandbox: false,
                                script: '''
				                    return Arrays.asList(Eval.me(JOB_PROPS)['env_list'].split(","))   
                                '''
                            ]]],
                            [$class: 'CascadeChoiceParameter', name: 'JENKINS_BUILD_NUM', choiceType: 'PT_SINGLE_SELECT', description: '', filterLength: 1, filterable: false, randomName: 'choice-parameter-5011039524967777', referencedParameters: 'JOB_PROPS,JENKINS_BUILD_JOB', script: [$class: 'GroovyScript', fallbackScript: [classpath: [], sandbox: false, script: ''], script: [classpath: [], sandbox: false,
                                script: '''
                                    def jenkinsBuildList = "ls -vm ${Eval.me(JOB_PROPS).JENKINS_HOME}/jobs/PRP-CUSTOM-AGENT-BUILD/builds/".execute().text.trim()
                                    return Arrays.asList(jenkinsBuildList.split(","))
                                '''
                            ]]],
                            [$class: 'DynamicReferenceParameter', choiceType: 'ET_FORMATTED_HTML', description: '', name: 'BUILD_DESCRIPTION', omitValueField: false, randomName: 'choice-parameter-4317506565630469', referencedParameters: 'JOB_PROPS,JENKINS_BUILD_JOB,JENKINS_BUILD_NUM', script: [$class: 'GroovyScript', fallbackScript: [classpath: [], sandbox: false, script: ''], script: [classpath: [], sandbox: false,
                                script: '''
                                    import groovy.json.JsonSlurper
                                    File file = new File("${Eval.me(JOB_PROPS).JENKINS_HOME}/jobs/PRP-CUSTOM-AGENT-BUILD/builds/${JENKINS_BUILD_NUM.trim()}/build-info.json")
                                    
                                    if (file.exists()) {
                                      def InputJSON = new JsonSlurper().parseText(file.text)
                                      output = "<tr><th>Job Name</th><th>Job Type</th><th>Peformed By</th><th>Occurred On</th><th>Artifact(s)</th><th>Env</th><th>Node(s)</th><th>Comment</th></tr>"
                                      output = output + "<tr><td>PRP-CUSTOM-AGENT-BUILD #${JENKINS_BUILD_NUM.trim()}</td><td>${InputJSON.action}</td><td>${InputJSON.performedBy}</td><td>${InputJSON.performedAt}</td><td>${InputJSON.artifactList}</td><td>${InputJSON.env}</td><td>${InputJSON.nodeList}</td><td>${InputJSON.comment}</td></tr>"
                                      return "<style>.bordered-table {border: 1px solid black; border-collapse: collapse; margin-top: 1em; margin-bottom: 1em} .bordered-table th {border: 1px solid black;} .bordered-table td {border: 1px solid black;} </style><table class=\\"bordered-table\\">" + output + "</table>"
                                    } else {
                                      output = "PRP-CUSTOM-AGENT-BUILD #${JENKINS_BUILD_NUM.trim()} ("
                                      def dateCmd = ["date", "-r", "${Eval.me(JOB_PROPS).JENKINS_HOME}/jobs/PRP-CUSTOM-AGENT-BUILD/builds/${JENKINS_BUILD_NUM.trim()}/archive/jenkins-build-output/", "+%F %T %z"]
                                      def artifactCountCmd = "ls ${Eval.me(JOB_PROPS).JENKINS_HOME}/jobs/PRP-CUSTOM-AGENT-BUILD/builds/${JENKINS_BUILD_NUM.trim()}/archive/jenkins-build-output/ | wc -l"
                                      output = output + dateCmd.execute().text.trim()
                                      def artifactCount = ["bash", "-c", artifactCountCmd].execute().text.trim()
                                      output = output + ") contains " + artifactCount
                                      output = output + " artifacts."
                                      return "<i>"+output+"</i>"
                                    }  
                            '''
                            ]]]
							//extendedChoice(name: 'TAKE_BACKUP', description: '', multiSelectDelimiter: ',', quoteValue: false, saveJSONParameterToFile: false, type: 'PT_RADIO', defaultValue: 'NO', value: 'NO,YES', visibleItemCount: 5),
                            //booleanParam(defaultValue: false, description: '', name: 'TAKE_BACKUP'),
                            // [$class: 'DynamicReferenceParameter', choiceType: 'ET_FORMATTED_HTML', description: '', name: 'TAKE_BACKUP', omitValueField: true, defaultValue: 'NO', randomName: 'choice-parameter-2003150150145', script: [$class: 'GroovyScript', fallbackScript: [classpath: [], sandbox: false, script: ''], script: [classpath: [], sandbox: false,
                            //     script: '''
                            //         return "<div><input name=\\"value\\" type=\\"radio\\" value=\\"YES\\"> YES</div><div><input name=\\"value\\" type=\\"radio\\" value=\\"NO\\"> NO</div>"
							// 	'''		
                            // ]]],
							// [$class: 'DynamicReferenceParameter', choiceType: 'ET_FORMATTED_HTML', description: '', name: 'TAKE_BACKUP_FROM', omitValueField: true, randomName: 'choice-parameter-2003150150145153', referencedParameters: 'LR_NODES,TAKE_BACKUP', script: [$class: 'GroovyScript', fallbackScript: [classpath: [], sandbox: false, script: ''], script: [classpath: [], sandbox: false,
                            //     script: '''
                            //         if (!TAKE_BACKUP.equals("YES")) {
                            //             return "<b>No Backup</b><input type=\\"hidden\\" name=\\"value\\" value=\\"No Backup\\" />"
                            //         }
                            //         if (!LR_NODES.isEmpty()) {
                            //             def lrNodeList = Arrays.asList(LR_NODES.split(","))
                            //             def htmlString = ""
                            //             for (lrNode in lrNodeList) {
                            //                 htmlString = htmlString + "<div><input name=\\"TAKE_BACKUP_FROM.value\\" type=\\"radio\\" value=\\"${lrNode}\\" checked> ${lrNode}</div>"
                            //             }
                            //             return htmlString
                            //         }
                                    
                            //         return "<b>No Nodes Selected</b><input type=\\"hidden\\" name=\\"value\\" value=\\"No Nodes Selected\\" />"
							// 	'''
                            // ]]],
							// [$class: 'DynamicReferenceParameter', choiceType: 'ET_FORMATTED_HTML', description: '', name: 'TAKE_BACKUP_COMMENT', omitValueField: true, randomName: 'choice-parameter-200315015014515', referencedParameters: 'TAKE_BACKUP', script: [$class: 'GroovyScript', fallbackScript: [classpath: [], sandbox: false, script: ''], script: [classpath: [], sandbox: false,
                            //     script: '''
                            //         if (!TAKE_BACKUP.equals("YES")) {
                            //             return "<b>No Backup</b><input type=\\"hidden\\" name=\\"value\\" value=\\"No Backup\\" />"
                            //         }
                                    
                            //         return "<textarea name=\\"value\\" style=\\"margin: 0px; height: 155px; width: 450px;\\"></textarea>"
							// 	'''
                            // ]]],
							// extendedChoice(name: 'TOMCAT_RESTART_OPTION', description: '', multiSelectDelimiter: ',', quoteValue: false, saveJSONParameterToFile: false, type: 'PT_RADIO', defaultValue: 'NO RESTART', value: 'NO RESTART,NORMAL RESTART,CLEAN RESTART', visibleItemCount: 5)
                        ])
                    ])
                }

                echo '*** END GET-USER-INPUT ***'
            }
        }
        stage('Deploy') {
            steps {
                echo '*** START DEPLOY ***'

                script {
                    def dxpPrpProps = Eval.me(params.JOB_PROPS)
                    def buildJobName = "PRP-CUSTOM-AGENT-BUILD"

                    def deployDir = dxpPrpProps["CUSTOM_JAVA_AGENT_DIR"]
                    def serverIp = dxpPrpProps["SERVER_IP." + params.DEPLOY_ENVIRONMENT]

                    def jarName = "prp-custom-agent.jar"

                    sh "ssh liferay@${serverIp} 'mkdir -p ${deployDir}'"

                    sh "cd ${env.JENKINS_HOME}/jobs/${buildJobName}/builds/${params.JENKINS_BUILD_NUM.trim()}/archive/jenkins-build-output && chmod 755 * && scp ${jarName} liferay@${serverIp}:${deployDir}"

                    echo "JOB_NAME --> ${env.JOB_NAME}"
                    echo "BUILD_NUMBER --> ${currentBuild.number}"
                        
					BUILD_TRIGGER_BY = "${currentBuild.getBuildCauses()[0].userId}"
					echo "BUILD_TRIGGER_BY: ${BUILD_TRIGGER_BY}"
					
					def jenkins = Jenkins.getInstance()
					
					def FULL_PROJECT_NAME = currentBuild.getFullProjectName()
					echo "FULL_PROJECT_NAME --> ${FULL_PROJECT_NAME}"
					
					JOB_BUILD_DIR = jenkins.getItemByFullName(FULL_PROJECT_NAME).getBuildDir()
					
					// prepare json
					def builder = new JsonBuilder()
					builder performedBy: BUILD_TRIGGER_BY, performedAt: LocalDateTime.now().toString(), artifactCount: 1, artifactList: [jarName], action: 'DEPLOY', env: params.DEPLOY_ENVIRONMENT, comment: ''
					json = builder.toPrettyString()

					// print to console and write to a file
					println json
					new File(JOB_BUILD_DIR.toString() + "/" + currentBuild.number + "/build-info.json").write(json)
                }

                echo '*** END DEPLOY ***'
            }
        }
    }
}
