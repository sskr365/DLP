import java.time.LocalDateTime
import groovy.json.JsonBuilder

def uploadToNexus = false

pipeline {
    agent any
    environment {
        // Nexus Artifact Uploader plugin
        NEXUS_VERSION = "nexus3"
        NEXUS_PROTOCOL = "http"
        NEXUS_URL = "localhost:8081" // NEXUS_URL = "172.17.0.3:8081"
        NEXUS_REPOSITORY = "test-repository"
        NEXUS_CREDENTIAL_ID = "nexus-credentials"
    }

    stages {
        stage("Build Info") {
            steps {
                echo '*** START BUILD-INFO***'

                echo "BUILD_TAG --> ${env.BUILD_TAG}"

                echo '*** END BUILD-INFO***'
            }
        }
        stage("Get User Input") {
            steps {
                echo '*** START GET-USER-INPUT ***'

                script {
                    properties([
                        parameters([
                            extendedChoice(defaultValue: 'prpdxp/prpws', description: 'Enter HPE Git repository, format: ${username}/${repo-name} (e.g. prpdxp/prpws)', multiSelectDelimiter: ',', name: 'GIT_HPE_REPO', quoteValue: false, saveJSONParameterToFile: false, type: 'PT_TEXTBOX', visibleItemCount: 5),
                            [$class: 'CascadeChoiceParameter', choiceType: 'PT_SINGLE_SELECT', description: '', filterLength: 1, filterable: false, name: 'GIT_HPE_BRANCH', randomName: 'choice-parameter-4816978971651983', referencedParameters: 'GIT_HPE_REPO', script: [$class: 'GroovyScript', fallbackScript: [classpath: [], sandbox: false, script: ''], script: [classpath: [], sandbox: false,
                                script: '''
                                    def gitURL = "git@github.hpe.com:${GIT_HPE_REPO}.git"
                                    def command = "git ls-remote -h $gitURL"
                                    def proc = command.execute()
                                    proc.waitFor()
                                    if ( proc.exitValue() != 0 ) {
                                    println "Error, ${proc.err.text}"
                                    return
                                    }
                                    def branches = proc.in.text.readLines().collect {
                                        it.replaceAll(/[a-z0-9]*\\trefs\\/heads\\//, \'\')
                                    }
                                    return branches
                                '''
                            ]]],
                            [$class: 'CascadeChoiceParameter', name: 'BUILD_MODULE_LIST', choiceType: 'PT_MULTI_SELECT', description: '', filterLength: 1, filterable: false, randomName: 'choice-parameter-4235126266853202', referencedParameters: 'GIT_HPE_REPO,GIT_HPE_BRANCH', script: [$class: 'GroovyScript', fallbackScript: [classpath: [], sandbox: false, script: ''], script: [classpath: [], sandbox: false,
                                script: '''
                                    def trimPrefix = {
                                        it.startsWith('origin/') ? it.minus('origin/') : it
                                    }
                                    def trimmedBranchName = trimPrefix(GIT_HPE_BRANCH)
                                    def curlCmd = ["curl", "-H 'Accept:application/vnd.github.v3.raw'", "-o", "updated_components.lst", "-H", "Authorization:token c69d166d536a56ce05bea08aff3be9adfc21c8d5", "https://raw.github.hpe.com/${GIT_HPE_REPO}/${trimmedBranchName}/updated_components.lst"]
                                    def proc = curlCmd.execute()
                                    proc.waitFor()
                                    def fileContents = "cat updated_components.lst".execute().text
                                    return Arrays.asList(fileContents.split("\\\\n"))
                                '''
                            ]]],
                            // extendedChoice(defaultValue: 'NO', description: 'Upload artifact(s) to Nexus?', multiSelectDelimiter: ',', name: 'NEXUS_UPLOAD', quoteValue: false, saveJSONParameterToFile: false, type: 'PT_RADIO', value: 'YES,NO', visibleItemCount: 5),
                            [$class: 'DynamicReferenceParameter', choiceType: 'ET_FORMATTED_HTML', description: '', name: 'BUILD_COMMENT', omitValueField: true, randomName: 'choice-parameter-200315015014515', script: [$class: 'GroovyScript', fallbackScript: [classpath: [], sandbox: false, script: ''], script: [classpath: [], sandbox: false,
                                script: '''
                                    return "<textarea name=\\"value\\" style=\\"margin: 0px; height: 125px; width: 400px;\\"></textarea>"
								'''
                            ]]]
                        ])
                    ])
                }

                echo '*** END GET-USER-INPUT ***'
            }
        }
        stage('Git Checkout') {
            steps {
                git branch: '${GIT_HPE_BRANCH}', url: 'git@github.hpe.com:${GIT_HPE_REPO}.git'
            }
        }
        stage('Build Modules') {
            when {
                expression {
                    return params.BUILD_MODULE_LIST
                }
            }
            steps {
                echo '*** START BUILD-MODULES ***'

                script {
                    def buildModuleList = []
                    if (isUnix()) {

                        // grant executable permissions on gradlew script
                        sh 'chmod +x gradlew'

                        buildModuleList = params.BUILD_MODULE_LIST.trim().split(',')

                        echo "buildModuleList --> ${buildModuleList}"
                        echo "buildModuleList.size() --> ${buildModuleList.size()}"

                        buildModuleList.each { moduleName ->
                            File gulpFile = new File("${WORKSPACE}/${moduleName}/gulpfile.js")
                            try {
                                if (gulpFile.exists()) {
                                    dir("${WORKSPACE}/${moduleName}") {
                                        sh "rm -rf package-lock.json"
									    sh "npm list natives@1.1.6 || export https_proxy='http://proxy.houston.hpecorp.net:8080'; npm install -D natives@1.1.6"
										sh "export https_proxy='http://proxy.houston.hpecorp.net:8080'; npm install"
										sh "gulp build"
										if(moduleName.find("react-modules/*")) {
											sh "gulp deploy"
										}
									}
                                } else {
                                    sh "./gradlew -Dhttps.proxyHost=proxy.houston.hpecorp.net -Dhttps.proxyPort=8080 clean deploy -p ${moduleName} --stacktrace"
                                }
                            } catch(Exception e) {
                                echo "Encountered exception while building module (${moduleName}) :: ${e}"
                            }
                        }
                    } else {
                        buildModuleList.each { moduleName ->
                            bat "gradlew clean deploy -p ${moduleName}"
                        }
                    }
                    echo "JOB_NAME --> ${env.JOB_NAME}"
                    echo "BUILD_NUMBER --> ${currentBuild.number}"
					
					def artifactList = sh(script: 'find ./**/**/dist ./dist ./bundles/osgi/modules ./bundles/deploy -type f -printf "%f\n" 2>/dev/null || true', returnStdout: true).split()
                    echo "artifactList --> ${artifactList}"
                    def artifactCount = artifactList.size()
                    echo "artifactCount --> ${artifactCount}"
                        
                    BUILD_TRIGGER_BY = "${currentBuild.getBuildCauses()[0].userId}"
                    echo "BUILD_TRIGGER_BY: ${BUILD_TRIGGER_BY}"
		    
		    def jenkins = Jenkins.getInstance()
					
			def FULL_PROJECT_NAME = currentBuild.getFullProjectName()
			echo "FULL_PROJECT_NAME --> ${FULL_PROJECT_NAME}"

			JOB_BUILD_DIR = jenkins.getItemByFullName(FULL_PROJECT_NAME).getBuildDir()

                    // prepare json
                    def builder = new JsonBuilder()
                    builder performedBy: BUILD_TRIGGER_BY, performedAt: LocalDateTime.now().toString(), artifactCount: artifactCount, artifactList: artifactList, action: 'BUILD', env: '', nodeList: '', comment: params.BUILD_COMMENT
                    json = builder.toPrettyString()
                        
                    // print to console and write to a file
                    println json
                    new File(JOB_BUILD_DIR.toString() + "/" + currentBuild.number + "/build-info.json").write(json)
                }

                fileOperations([fileCopyOperation(excludes: '', flattenFiles: true, includes: '**/wars/**/dist/*.war, **/bundles/osgi/modules/*.jar, **/deploy/*.war, ./dist/*.war, **/**/dist/*.jar', targetLocation: 'jenkins-build-output')])
                
                echo '*** END BUILD-MODULES ***'
            }
        }
        stage('Nexus Upload') {
            when {
                expression {
                    return uploadToNexus
                }
            }
            steps {
                echo '*** START NEXUS-UPLOAD ***'

                nexusArtifactUploader(
                    nexusVersion: NEXUS_VERSION,
                    protocol: NEXUS_PROTOCOL,
                    nexusUrl: NEXUS_URL,
                    groupId: 'com.hpe',
                    version: '1.0.0',
                    repository: NEXUS_REPOSITORY,
                    credentialsId: NEXUS_CREDENTIAL_ID,
                    artifacts: [
                        // Artifact generated such as .jar, .ear and .war files.
                        [
                            artifactId: 'my-example-portlet',
                            classifier: '',
                            file: 'bundles/osgi/modules/com.liferay.docs.myexample.jar',
                            type: 'jar'
                        ]
                    ]
                )

                echo '*** END NEXUS-UPLOAD ***'
            }
        }
    }
    post {
        always {
            archiveArtifacts artifacts: 'jenkins-build-output/*', onlyIfSuccessful: true
            cleanWs()
        }
    }
}