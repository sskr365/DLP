def covAnalyze = '/opt/cloudhost/cov-analysis-linux64-2022.6.0/bin/cov-analyze'
def covBuild = '/opt/cloudhost/cov-analysis-linux64-2022.6.0/bin/cov-build'
def covCommitDefects = '/opt/cloudhost/cov-analysis-linux64-2022.6.0/bin/cov-commit-defects'
def covManageEmit = '/opt/cloudhost/cov-analysis-linux64-2022.6.0/bin/cov-manage-emit'
def covBlame = '/opt/cloudhost/cov-analysis-linux64-2022.6.0/bin/cov-blame'
def covManageIm = '/opt/cloudhost/cov-analysis-linux64-2022.6.0/bin/cov-manage-im'
def covImportScm = '/opt/cloudhost/cov-analysis-linux64-2022.6.0/bin/cov-import-scm'

pipeline {
    agent any
    environment { 
        http_proxy = 'http://jenkins-prpdxp.it.hpe.com:8070/'
    }
    stages {
        stage('Get User Input') {
            steps {
                echo '*** START GET-USER-INPUT ***'

                script {
                    properties([
                        parameters([
                            extendedChoice(defaultValue: 'prpdxp/prpws', description: 'Enter HPE Git repository, format: ${username}/${repo-name} (e.g. prpdxp/prpws)', multiSelectDelimiter: ',', name: 'GIT_HPE_REPO', quoteValue: false, saveJSONParameterToFile: false, type: 'PT_TEXTBOX', visibleItemCount: 5),
                            [$class: 'CascadeChoiceParameter', choiceType: 'PT_SINGLE_SELECT', description: '', filterLength: 1, filterable: false, name: 'GIT_HPE_BRANCH', randomName: 'choice-parameter-4816978971651983', referencedParameters: 'GIT_HPE_REPO', script: [$class: 'GroovyScript', fallbackScript: [classpath: [], sandbox: false, script: ''], script: [classpath: [], sandbox: false,
                                script: '''
                                    def gitURL = "git@github.hpe.com:${GIT_HPE_REPO}.git"
                                    def command = "git ls-remote -h $gitURL"
                                    def proc = command.execute()
                                    proc.waitFor()
                                    if ( proc.exitValue() != 0 ) {
                                    println "Error, ${proc.err.text}"
                                    return
                                    }
                                    def branches = proc.in.text.readLines().collect {
                                        it.replaceAll(/[a-z0-9]*\\trefs\\/heads\\//, \'\')
                                    }
                                    return branches
                                '''
                            ]]],
                            [$class: 'CascadeChoiceParameter', name: 'BUILD_MODULE_LIST', choiceType: 'PT_MULTI_SELECT', description: '', filterLength: 1, filterable: false, randomName: 'choice-parameter-4235126266853202', referencedParameters: 'GIT_HPE_REPO,GIT_HPE_BRANCH', script: [$class: 'GroovyScript', fallbackScript: [classpath: [], sandbox: false, script: ''], script: [classpath: [], sandbox: false,
                                script: '''
                                    def trimPrefix = {
                                        it.startsWith('origin/') ? it.minus('origin/') : it
                                    }
                                    def trimmedBranchName = trimPrefix(GIT_HPE_BRANCH)
                                    def curlCmd = ["curl", "-H 'Accept:application/vnd.github.v3.raw'", "-o", "updated_components.lst", "-H", "Authorization:token c69d166d536a56ce05bea08aff3be9adfc21c8d5", "https://raw.github.hpe.com/${GIT_HPE_REPO}/${trimmedBranchName}/updated_components.lst"]
                                    def proc = curlCmd.execute()
                                    proc.waitFor()
                                    def fileContents = "cat updated_components.lst".execute().text
                                    return Arrays.asList(fileContents.split("\\\\n"))
                                '''
                            ]]],
                        ])
                    ])
                }

                echo '*** END GET-USER-INPUT ***'
            }
        }
        stage('Git Checkout') {
            steps {
                git branch: '${GIT_HPE_BRANCH}', url: 'git@github.hpe.com:${GIT_HPE_REPO}.git'
            }
        }
        stage('Coverity Build') {
            steps {
                echo '*** START BUILD-MODULES ***'

                script {
                    def buildModuleList = []
                    if (isUnix()) {
                        sh 'chmod +x gradlew'
                        buildModuleList = params.BUILD_MODULE_LIST.trim().split(',')
                        echo "buildModuleList --> ${buildModuleList}"
                        echo "buildModuleList.size() --> ${buildModuleList.size()}"
                        buildModuleList.each { moduleName ->
                            File gulpFile = new File("${WORKSPACE}/${moduleName}/gulpfile.js")
                            try {
                                if (gulpFile.exists()) {
                                    dir("${WORKSPACE}/${moduleName}") {
                                        sh "rm -rf package-lock.json"
									    sh "npm list natives@1.1.6 || export https_proxy='http://proxy.houston.hpecorp.net:8080'; npm install -D natives@1.1.6"
										sh "export https_proxy='http://proxy.houston.hpecorp.net:8080'; npm install"
                                        sh "gulp build"
										sh "'${covBuild}' --dir ${WORKSPACE}/${moduleName}/idir --no-command --fs-capture-search ${WORKSPACE}/${moduleName}"
										if(moduleName.find("react-modules/*")) {
                                            sh "gulp deploy"
											sh "'${covBuild}' --dir ${WORKSPACE}/${moduleName}/idir --no-command --fs-capture-search ${WORKSPACE}/${moduleName}"
                                            sh "'${covManageEmit}' --dir ${WORKSPACE}/${moduleName}/idir list"
										}
									}
                                } else {
	                                sh "'${covBuild}' --dir ${WORKSPACE}/${moduleName}/idir --fs-capture-search ${WORKSPACE}/${moduleName} ./gradlew -Dhttps.proxyHost=proxy.houston.hpecorp.net -Dhttps.proxyPort=8080 clean deploy -p ${moduleName} --stacktrace"
                                }
                            } catch(Exception e) {
                                echo "Encountered exception while building module (${moduleName}) :: ${e}"
                            }
                        }
                    } else {
                        buildModuleList.each { moduleName ->
                            bat "'${covBuild}' --dir ${WORKSPACE}/${moduleName}/idir gradlew clean deploy -p ${moduleName}"
                        }
                    }
                echo '*** END BUILD-MODULES ***'
                }
            }
        }
        stage('Coverity Analyze and Generate Report') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'cov-platform', passwordVariable: "password", usernameVariable: "user")]) {\
                        withCoverityEnvironment(coverityInstanceUrl : 'http://jenkins-prpdxp.it.hpe.com:8070/coverity', credentialsId : 'cov-platform') {
                            def buildModuleList = []
                            buildModuleList = params.BUILD_MODULE_LIST.trim().split(',')
                            buildModuleList.each { moduleName ->
                                sh "'${covImportScm}' --dir ${WORKSPACE}/${moduleName}/idir --scm git"
                                echo 'Running coverity static analysis..'
                                sh "'${covAnalyze}' --dir ${WORKSPACE}/${moduleName}/idir"
                                def streamName = moduleName.substring(moduleName.lastIndexOf('/')+1,moduleName.size()).trim()
                                echo 'Generating coverity report..'
                                sh "'${covCommitDefects}' --dir ${WORKSPACE}/${moduleName}/idir --url http://jenkins-prpdxp.it.hpe.com:8070/coverity --stream ${streamName} --user '${user}' --password '${password}' --preview-report-v2 ${WORKSPACE}/preview-report.json --scm git --debug"
                                sh "'${covBlame}' --dir ${WORKSPACE}/${moduleName}/idir -owner-assignment-rules file,line,function,all_functions,all_files,all_events --preview-report ${WORKSPACE}/preview-report.json --scm git --debug"
                                // sh "'${covManageIm}' --url http://jenkins-prpdxp.it.hpe.com:8070/coverity --user '${user}' --password '${password}' --mode defects --update --stream ${streamName} --set 'class:False Positive' --set 'action:Fix Required' --set 'severity:Major' --set 'owner:PRP-DXP-HPEIT' --debug"
                                sh "'${covManageIm}' --url http://jenkins-prpdxp.it.hpe.com:8070/coverity --user '${user}' --password '${password}' --mode streams --update --stream ${streamName} --set ownerAssignmentOption:scm --debug"
                                sh "'${covCommitDefects}' --dir ${WORKSPACE}/${moduleName}/idir --url http://jenkins-prpdxp.it.hpe.com:8070/coverity --stream ${streamName} --user '${user}' --password '${password}' --scm git"
                                sh "'${covManageIm}' --url http://jenkins-prpdxp.it.hpe.com:8070/coverity --user '${user}' --password '${password}' --mode notification --execute --view 'High Impact Outstanding'"
                            }
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            cleanWs()
        }
    }
}