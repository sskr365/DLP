import java.time.LocalDateTime
import groovy.json.JsonBuilder

pipeline {
    agent any

    stages {
        stage("Get User Input") {
            steps {
                echo '*** START GET-USER-INPUT ***'

                script {
                    properties([
                        parameters([
                            extendedChoice(name: 'JOB_NAME', description: '', multiSelectDelimiter: ',', quoteValue: false, saveJSONParameterToFile: false, type: 'PT_HIDDEN', visibleItemCount: 5, defaultBindings: '', defaultGroovyClasspath: '',
                                defaultGroovyScript: '''
                                    def build = Thread.currentThread().toString()
                                    def regexp= ".+?/job/([^/]+)/.*"
                                    def match = build  =~ regexp
                                    def jobName = match[0][1]
                                    return jobName
                                '''
                            ),
                            extendedChoice(name: 'JOB_PROPS', description: '', multiSelectDelimiter: ',', quoteValue: false, saveJSONParameterToFile: false, type: 'PT_HIDDEN', visibleItemCount: 5, defaultBindings: '', defaultGroovyClasspath: '',
                                defaultGroovyScript: '''
                                    def curlCmd = ["curl", "-H \'Accept:application/vnd.github.v3.raw\'", "-o", "jenkins-prp-healthcheck.properties", "-H", "Authorization:token c69d166d536a56ce05bea08aff3be9adfc21c8d5", "https://raw.github.hpe.com/prpdxp/prp-devops/master/jenkins-prp-healthcheck/jenkins-prp-healthcheck.properties"]
                                    def proc = curlCmd.execute()
                                    proc.waitFor()
                                    Properties properties = new Properties()
                                    File propertiesFile = new File("jenkins-prp-healthcheck.properties")
                                    def stream = propertiesFile.newDataInputStream()
                                    properties.load(stream)
                                    def groovyPropMap = []
                                    properties.each() { k, v -> groovyPropMap << \'"\' + k + \'":"\' + v + \'"\'}
                                    return groovyPropMap.toString()
                                '''
                            ),
                            extendedChoice(defaultValue: 'prpdxp/prp-healthcheck', description: 'Enter HPE Git repository (prp-healthcheck), format: ${username}/${repo-name} (e.g. prpdxp/prp-healthcheck)', multiSelectDelimiter: ',', name: 'GIT_HPE_REPO', quoteValue: false, saveJSONParameterToFile: false, type: 'PT_TEXTBOX', visibleItemCount: 5),
                            [$class: 'CascadeChoiceParameter', choiceType: 'PT_SINGLE_SELECT', description: '', filterLength: 1, filterable: false, name: 'GIT_HPE_BRANCH', randomName: 'choice-parameter-4816978971651983', referencedParameters: 'GIT_HPE_REPO', script: [$class: 'GroovyScript', fallbackScript: [classpath: [], sandbox: false, script: ''], script: [classpath: [], sandbox: false,
                                script: '''
                                    def gitURL = "git@github.hpe.com:${GIT_HPE_REPO}.git"
                                    def command = "git ls-remote -h $gitURL"
                                    def proc = command.execute()
                                    proc.waitFor()
                                    if ( proc.exitValue() != 0 ) {
                                    println "Error, ${proc.err.text}"
                                    return
                                    }
                                    def branches = proc.in.text.readLines().collect {
                                        it.replaceAll(/[a-z0-9]*\\trefs\\/heads\\//, \'\')
                                    }
                                    return branches
                                '''
                            ]]],
                            [$class: 'CascadeChoiceParameter', choiceType: 'PT_SINGLE_SELECT', description: '', filterLength: 1, filterable: false, name: 'BUILD_ENVIRONMENT', randomName: 'choice-parameter-4816978651983', referencedParameters: 'JOB_NAME,JOB_PROPS', script: [$class: 'GroovyScript', fallbackScript: [classpath: [], sandbox: false, script: ''], script: [classpath: [], sandbox: false,
                                script: '''
                                    return Arrays.asList(Eval.me(JOB_PROPS).BUILD_ENV_LIST.split(","))  
                                '''
                            ]]],
                            //extendedChoice(defaultValue: 'NO', description: 'Upload artifact(s) to Nexus?', multiSelectDelimiter: ',', name: 'NEXUS_UPLOAD', quoteValue: false, saveJSONParameterToFile: false, type: 'PT_RADIO', value: 'YES,NO', visibleItemCount: 5),
                            [$class: 'DynamicReferenceParameter', choiceType: 'ET_FORMATTED_HTML', description: '', name: 'BUILD_COMMENT', omitValueField: true, randomName: 'choice-parameter-200315015014515', script: [$class: 'GroovyScript', fallbackScript: [classpath: [], sandbox: false, script: ''], script: [classpath: [], sandbox: false,
                                script: '''
                                    return "<textarea name=\\"value\\" style=\\"margin: 0px; height: 125px; width: 400px;\\"></textarea>"
								'''
                            ]]]
                        ])
                    ])
                }

                echo '*** END GET-USER-INPUT ***'
            }
        }
        stage('Git Checkout') {
            steps {
                echo '*** START GIT CHECKOUT ***'

                git branch: '${GIT_HPE_BRANCH}', url: 'git@github.hpe.com:${GIT_HPE_REPO}.git'

                echo '*** END GIT CHECKOUT ***'
            }
        }
        stage('Build') {
            steps {
                echo '*** START BUILD ***'

                script {
                    if (isUnix()) {
                        sh 'chmod +x gradlew'
                        sh "./gradlew -Dhttps.proxyHost=proxy.houston.hpecorp.net -Dhttps.proxyPort=8080 build copyConfig -Penv=${BUILD_ENVIRONMENT}"
                    } else {
                        // TODO
                    }
                    
                    echo "JOB_NAME --> ${env.JOB_NAME}"
                    echo "BUILD_NUMBER --> ${currentBuild.number}"
                    
                    def artifactList = sh(script: 'ls -1 build/libs', returnStdout: true).split()
                    echo "artifactList --> ${artifactList}"
                    def artifactCount = artifactList.size()
                    echo "artifactCount --> ${artifactCount}"
                        
                    BUILD_TRIGGER_BY = "${currentBuild.getBuildCauses()[0].userId}"
                    echo "BUILD_TRIGGER_BY: ${BUILD_TRIGGER_BY}"
		    
                    def jenkins = Jenkins.getInstance()

                    def FULL_PROJECT_NAME = currentBuild.getFullProjectName()
                    echo "FULL_PROJECT_NAME --> ${FULL_PROJECT_NAME}"

                    JOB_BUILD_DIR = jenkins.getItemByFullName(FULL_PROJECT_NAME).getBuildDir()

                    // prepare json
                    def builder = new JsonBuilder()
                    builder performedBy: BUILD_TRIGGER_BY, performedAt: LocalDateTime.now().toString(), artifactCount: artifactCount, artifactList: artifactList, action: "PRP-HEALTHCHECK ${params.BUILD_ENVIRONMENT} BUILD", env: params.BUILD_ENVIRONMENT, nodeList: '', comment: params.BUILD_COMMENT
                    json = builder.toPrettyString()
                        
                    // print to console and write to a file
                    println json
                    new File(JOB_BUILD_DIR.toString() + "/" + currentBuild.number + "/build-info.json").write(json)
                }

                echo '*** END BUILD ***'
            }
        }
    }
    post {
        always {
            archiveArtifacts artifacts: 'build/libs/*', onlyIfSuccessful: true
            cleanWs()
        }
    }
}
